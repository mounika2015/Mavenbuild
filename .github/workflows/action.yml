#### Environment Variables ####
env:
  COVERAGE_THRESHOLD: 20
  CODE_SMELLS_THRESHOLD: 200
  VULNERABILITIES_THRESHOLD: 6
  
name: Action1
on:
  #push:
    #branches: [ main ]
  #pull_request:
    #branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ramandevopsnew_java-maven-app

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.4
        with :
          name: Artifacts
          path : target/*.jar
       ######## JUnit Test with Maven ########
      - name: Test with Maven
        run: mvn -B test --file pom.xml
        
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco/ 
          
      #######SONAR GATE################
      - name: Sonar Gate
        shell: bash 
        run: |
          curl --location --request GET 'https://sonarcloud.io/api/measures/component?metricKeys=code_smells,coverage,duplicated_lines_density,vulnerabilities,security_hotspots,critical_violations,bugs&component=ramandevopsnew_java-maven-app' --header 'Authorization: Bearer 4512dc92c65af491dad8c07aa97a7d265f91fb4f' > ./Response.json
          while read jsonData ;
          do
            metric=$(jq -r '.metric' <<< $jsonData)
            value=$(jq -r '.value'<<< $jsonData)
            echo "$metric"
            echo "$value"
            #echo "${metric%.*}"

            if [ "$metric" == "coverage" ] ;
              then
                if [ "${value%.*}" -lt ${{env.COVERAGE-THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.COVERAGE_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.COVERAGE_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi

            elif [ "$metric" == "code_smells" ] ;
              then
                if [ "${value%.*}" -gt ${{env.CODE_SMELLS_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.CODE_SMELLS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.CODE_SMELLS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi

            elif [ "$metric" == "vulnerabilities" ] ;
              then
                if [ "${value%.*}" -gt ${{env.VULNERABILITIES_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.VULNERABILITIES_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.VULNERABILITIES_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi

            elif [ "$metric" == "critical_violations" ] ;
              then
                if [ "${value%.*}" -gt ${{env.CRITICAL_VIOLATIONS_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.CRITICAL_VIOLATIONS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.CRITICAL_VIOLATIONS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi
            fi
          done <<< $(jq -c '.component.measures[]' $PWD/Response.json)
          cat $PWD/Response.json
          
       ######Docker Image ######   
      - uses: actions/checkout@v2
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag nginx:$(date +%s)
      - name: Docker Login
        # uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ramana537/docker_github537
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
